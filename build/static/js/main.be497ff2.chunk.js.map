{"version":3,"sources":["giphySvc.js","components/Card.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["GiphySvc","Object","classCallCheck","this","createClass","key","value","_ref","data","map","item","title","imageUrl","images","preview_webp","url","slug","id","source","_makeRequest2","asyncToGenerator","regenerator_default","a","mark","_callee","term","_ref2","_args","arguments","wrap","_context","prev","next","length","undefined","Axios","get","concat","sent","abrupt","_mapResponse","stop","apply","_makeRequest","CardComponent","cards","gifs","react_default","createElement","Col","md","Card","style","width","Img","variant","src","Body","Title","Button","onClick","window","open","Container","fluid","Row","SearchComponent","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","defineProperty","setState","onSearch","state","initialState","search","InputGroup","className","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","onChange","Component","App","svc","console","log","objectSpread","_this2","Search","i","handleChangeSerch","components_Card","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be497ff2.chunk.js","sourcesContent":["import Axios from 'axios'\nconst URL = 'https://api.giphy.com/v1/gifs/search?api_key=eK4fyyLR9LppRCzO8VAw778zaB38Cb1O&limit=6'\n\nexport class GiphySvc {\n  _mapResponse({ data }) {\n    if (!data) return [];\n\n    return data.map(item => {\n      return {\n        title: item.title,\n        imageUrl: item.images.preview_webp.url,\n        // imageUrl: item.images.fixed_width_still.url,\n        slug: item.slug,\n        id: item.id,\n        source: item.url,\n      };\n    });\n  }\n  \n  async _makeRequest(term='lol') {\n    const {data} = await Axios.get(`${URL}&q=${term}`)\n    return this._mapResponse(data)\n  }\n  search(term) {\n    return this._makeRequest(term);\n  }\n\n  \n}\n","import React from 'react'\nimport { Card, Button, Container, Col, Row } from 'react-bootstrap';\n\nconst CardComponent = ({ gifs }) => {\n\n      const cards = gifs.map(item => (\n          <Col md={4} key={item.id}>\n            <Card  style={{ width: '100%' }}>\n            <Card.Img variant=\"top\" src={item.imageUrl} />\n            <Card.Body>\n                <Card.Title>{item.title}</Card.Title>\n                <Button onClick={() => window.open(item.source, \"_blank\")} variant=\"primary\">Full Gif</Button>\n            </Card.Body>\n            </Card>\n          </Col>\n      )\n    )\n  \n\n  return <Container fluid={true}><Row>{cards}</Row></Container>\n}\n\nexport default  CardComponent","import React, { Component } from 'react';\nimport { InputGroup, FormControl, Row, Col } from 'react-bootstrap';\n\nclass SearchComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      search: '',\n    };\n\n    this.state = this.initialState;\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    const data = {\n      [name]: value,\n    };\n    this.setState(data);\n    this.props.onSearch(this.state);\n  };\n\n  render() {\n    const { search } = this.state;\n    return (\n      <Row>\n        <div>\n          <Col>\n            <InputGroup className=\"mb-4\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">*</InputGroup.Text>\n              </InputGroup.Prepend>\n\n              <FormControl\n                placeholder=\"Search here\"\n                name=\"search\"\n                aria-label=\"Giphy Term\"\n                aria-describedby=\"basic-addon1\"\n                value={search}\n                onChange={this.handleChange}\n              />\n            </InputGroup>\n          </Col>\n        </div>\n      </Row>\n    );\n  }\n}\n\nexport default SearchComponent;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './components/assets/bootstrap.min.css';\nimport './App.css';\n\nimport { Container } from 'react-bootstrap';\nimport { GiphySvc } from './giphySvc';\n// import Table from './components/Table';\nimport Card from './components/Card';\nimport SearchComponent from './components/Search';\nclass App extends Component {\n  constructor() {\n    super();\n    this.svc = new GiphySvc();\n  }\n  state = {\n    gifs: [],\n    search: '',\n  };\n\n  async handleChangeSerch({ search }) {\n    if (search.length < 2) return;\n    console.log('searching...');\n    const data = await this.svc.search(search);\n    console.log('searched!...', data.length);\n\n    this.setState({\n      ...this.state,\n      search: search,\n      gifs: data,\n    });\n  }\n  async componentDidMount() {\n    const data = await this.svc.search();\n    console.log('data', data);\n    this.setState({\n      gifs: data,\n    });\n  }\n  render() {\n    return (\n      <Container fluid>\n        <br />\n        <SearchComponent onSearch={i => this.handleChangeSerch(i)} />\n        <Container fluid>\n          <Card gifs={this.state.gifs} />\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}